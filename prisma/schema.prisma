generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  otp         String?
  is_verified Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userOnboardingSteps UserOnboardingStep[]
  userOnboardingStatus UserOnboardingStatus?
  userCheckins UserCheckin[]
  moods       Mood[]
  userTasks   UserTask[]
  chatMessages ChatMessage[]

  @@index([email])
}

model UserOnboardingStep {
  id              String   @id @default(uuid())
  userId          String
  onBoardingStep  Int

  focusArea       String?
  coachType       String?
  coachLook       String?
  coachStyle      String?
  ageRange        String?
  gender          String?
  planType        String?

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, onBoardingStep])
  @@index([userId])
}

model UserOnboardingStatus {
  userId                String   @id
  isOnBoardingCompleted Boolean  @default(false)

  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserCheckin {
  id        String   @id @default(uuid())
  userId    String
  date      String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
}


model Mood {
  id        String   @id @default(uuid())
  userId    String
  mood      String
  note      String?
  date      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
}

model UserTask {
  id        String   @id @default(uuid())
  userId    String
  date      String   // Store date as YYYY-MM-DD, no time
  greeting  String   // Short greeting message like "Good morning, Ayush!"
  task      String   @db.Text  // Longer paragraph text for tasks
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
}

model ChatMessage {
  id        String   @id @default(uuid())
  userId    String
  date      String   // Link to the day's task
  role      String   // 'user' or 'coach'
  message   String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

@@index([userId, date, createdAt])
}
